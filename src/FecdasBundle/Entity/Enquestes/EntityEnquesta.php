<?php
namespace FecdasBundle\Entity\Enquestes;

use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 * @ORM\Table(name="e_enquestes")
 * 
 * @author alex
 *
 */
class EntityEnquesta {
	
	/**
	 * @ORM\Id
	 * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
	 */
	protected $id;	

	/**
	 * @ORM\Column(type="string", length=200)
	 */
	protected $descripcio;
	
	/**
	 * @ORM\Column(type="datetime")
	 */
	protected $dataalta;
	
	/**
	 * @ORM\Column(type="datetime")
	 */
	protected $datainici;

	/**
	 * @ORM\Column(type="datetime", nullable=true)
	 */
	protected $datafinal;
	
	/**
     * @ORM\OneToMany(targetEntity="EntityEnquestaPregunta", mappedBy="enquesta")
     **/
	protected $preguntes;
	
	/**
	 * @ORM\OneToMany(targetEntity="EntityRealitzacio", mappedBy="enquesta")
	 */
	protected $realitzacions;	// Owning side of the relationship
	
	public function __construct($currentDate) {
		$this->setDataalta($currentDate);
		$this->preguntes = new \Doctrine\Common\Collections\ArrayCollection();
		$this->realitzacions = new \Doctrine\Common\Collections\ArrayCollection();
	}

	public function __toString() {
		$tostring = ((is_null($this->id))?'null':$this->id) . '<br/>';
		$tostring .= ((is_null($this->descripcio))?'null':$this->descripcio) . '<br/>';
		$tostring .= ((is_null($this->dataalta))?'null':$this->dataalta->format("Y-m-d")) . '<br/>';
		$tostring .= ((is_null($this->datainici))?'null':$this->datainici->format("Y-m-d")) . '<br/>';
		$tostring .= ((is_null($this->datafinal))?'null':$this->datafinal->format("Y-m-d")) . '<br/>';
		foreach ($this->preguntes as $pregunta) {
			$tostring .= (string) $pregunta;
		}
		
		return $tostring;
	}
	
	
    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    // Set Id not autogenerated
    /**
     * Set id
     *
     * @param integer $id
     */
     public function setId($id)
     {
     	$this->id = $id;
     }
    
    /**
     * Set descripcio
     *
     * @param string $descripcio
     */
    public function setDescripcio($descripcio)
    {
    	$this->descripcio = $descripcio;
    }
    
    /**
     * Get descripcio
     *
     * @return string
     */
    public function getDescripcio()
    {
    	return $this->descripcio;
    }
    
    /**
     * Set dataalta
     *
     * @param datetime $dataalta
     */
    public function setDataalta($dataalta)
    {
        $this->dataalta = $dataalta;
    }

    /**
     * Get dataalta
     *
     * @return datetime 
     */
    public function getDataalta()
    {
        return $this->dataalta;
    }

    /**
     * Set datainici
     *
     * @param datetime $datainici
     */
    public function setDatainici($datainici)
    {
        $this->datainici = $datainici;
    }

    /**
     * Get datainici
     *
     * @return datetime 
     */
    public function getDatainici()
    {
        return $this->datainici;
    }

    /**
     * Set datafinal
     *
     * @param datetime $datafinal
     */
    public function setDatafinal($datafinal)
    {
        $this->datafinal = $datafinal;
    }

    /**
     * Get datafinal
     *
     * @return datetime 
     */
    public function getDatafinal()
    {
        return $this->datafinal;
    }

    /**
     * Add preguntes
     *
     * @param FecdasBundle\Entity\Enquestes\EntityEnquestaPregunta $preguntes
     */
    public function addEntityEnquestaPregunta(\FecdasBundle\Entity\Enquestes\EntityEnquestaPregunta $preguntes)
    {
    	$this->preguntes->add($preguntes);
    }

    /**
     * Remove preguntes
     *
     * @param FecdasBundle\Entity\Enquestes\EntityEnquestaPregunta $preguntes
     */
    public function removeEntityEnquestaPregunta(\FecdasBundle\Entity\Enquestes\EntityEnquestaPregunta $preguntes)
    {
    	$preguntes->setEnquesta();
    	$this->preguntes->removeElement($preguntes);
    }
    
    /**
     * Get preguntes
     *
     * @return Doctrine\Common\Collections\Collection 
     */
    public function getPreguntes()
    {
        return $this->preguntes;
    }

    
    public function clearPreguntes() {
    	$this->preguntes = new \Doctrine\Common\Collections\ArrayCollection();
    }
    
    public function getPreguntesSortedByOrdre()
    {
    	$arr = $this->preguntes->toArray();
    	usort($arr, function($a, $b) {
    		if ($a === $b) {
    			return 0;
    		}
    		return ($a->getOrdre() < $b->getOrdre())? -1:1;;
    	});
    	return $arr;
    }
    
    public function estaTancada() {
    	if ($this->datafinal != null and $this->datafinal <= new \DateTime()) return true; 
    	return false;
    }
    
    
    /**
     * Add realitzacions
     *
     * @param FecdasBundle\Entity\Enquestes\EntityRealitzacio $realitzacions
     */
    public function addEntityRealitzacio(\FecdasBundle\Entity\Enquestes\EntityRealitzacio $realitzacions)
    {
    	$this->realitzacions->add($realitzacions);
    }

    /**
     * Get realitzacions
     *
     * @return Doctrine\Common\Collections\Collection 
     */
    public function getRealitzacions()
    {
        return $this->realitzacions;
    }
    
    /**
     *  Retorna enquesta realitzada per usuari o null 
     */
    public function getRealitzada($username) {
    	foreach ($this->realitzacions as $c => $realitzacio) {
    		if ($realitzacio->getUsuari() != null and
    			$realitzacio->getUsuari()->getUser() == $username) return $realitzacio;
    	}
    	return null;
    }
    
    /**
     * Retorna resultats de totes les realitzacions de l'enquesta  
     * 
     */
    public function getResultats() {
    	$respostes = array();
    	
    	foreach ($this->getPreguntesSortedByOrdre() as $c => $epregunta) {
    		$pregunta = $epregunta->getPregunta();

    		/* Arrays de respostes per cada pregunta */
    		$array_rang = array(array(0),array(0),array(0),array(0),array(0));	/* [0] - gens,  [1] - poc, .... [4] - molt */
    		$array_bool = array(array(0),array(0));	/* [1] - Si,  [0] - No */
    		$array_open = array();	/* [0] - resposta 1,  [1] - resposta 2 ... */
    		
    		/* Omplir els arrays */
    		foreach ($this->realitzacions as $c => $realitzacio) {
    			$resposta = $realitzacio->getResposta($pregunta);
    			
				if ($resposta != null) {
					switch ($pregunta->getTipus()) {
						case "RANG":
							$index_array = $resposta->getRespostarang()-1;
							if ($index_array < 0) $index_array = 0; // Possibles errors
							$array_rang[$index_array][0] = $array_rang[$index_array][0] + 1; 
							break;
						case "BOOL":
							if ($resposta->getRespostabool() == 1) $array_bool[0][0] = $array_bool[0][0] + 1; // Ull estÃ  al revÃ©s del que podria semblar
							else $array_bool[1][0] = $array_bool[1][0] + 1;  
							break;
						case "OPEN":
							if ($resposta->getRespostatxt() != null and $resposta->getRespostatxt() != "") $array_open[] = $resposta->getRespostatxt();
							break;
					}
				}    			
    		}
    		
    		/* Array resultat pregunta */
    		$res = array();
    		$res['pregunta'] = array('id' => $pregunta->getId(), 'enunciat' => $pregunta->getEnunciat(), 'tipus' => $pregunta->getTipus());
    		switch ($pregunta->getTipus()) {
    			case "RANG":
    				$res['resultats'] = json_encode($array_rang);
    				break;
    			case "BOOL":
    				$res['resultats'] = json_encode($array_bool);
    				break;
    			case "OPEN":
    				$res['resultats'] = $array_open;
    				break;
    		}
    		
    		/* Afegir a resultat */
    		$respostes[] = $res;
    	}

    	return $respostes;
    }
    
    /**
     * Retorna mitjana de tote les respostes d'una pregunta de l'enquesta
     *
     */
    public function getAvgPregunta(\FecdasBundle\Entity\Enquestes\EntityPregunta $pregunta) {
    	$sum = 0;
    	$total = 0;
    	foreach ($this->realitzacions as $c => $realitzacio) {
    		$resposta = $realitzacio->getResposta($pregunta);
    		if ($resposta != null) {
    			$total++;
    			switch ($pregunta->getTipus()) {
    				case "RANG":
    					$sum += $resposta->getRespostarang();
    					break;
    				case "BOOL":
    					$sum += $resposta->getRespostabool();
    					break;
    			}
    		}
    	}
    	
    	return ($total > 0)?($sum/$total):0;
    }
    
    /**
     * Retorna total de respostes per valor (1-gens, 1-poc, etc...) d'una pregunta RANG de l'enquesta
     *
     */
    public function getTotalPreguntaRang(\FecdasBundle\Entity\Enquestes\EntityPregunta $pregunta) {
    	$dadespregunta = array(0,0,0,0,0); /* [1] - gens,  [2] - poc, .... [5] - molt */ 
    	if ($pregunta->getTipus() != "RANG") return $dadespregunta;
    	
    	foreach ($this->realitzacions as $c => $realitzacio) {
    		$resposta = $realitzacio->getResposta($pregunta);
    		if ($resposta != null) {
    			$index_array = $resposta->getRespostarang();
    			if ($index_array >= 1 and $index_array <= 5) $dadespregunta[$index_array-1] = $dadespregunta[$index_array-1]+1;
    		}
    	}
    	 
    	return $dadespregunta;
    }

    /**
     * Retorna total de respostes per valor (0-No, 1-Si) d'una pregunta BOOL de l'enquesta
     *
     */
    public function getTotalPreguntaBool(\FecdasBundle\Entity\Enquestes\EntityPregunta $pregunta) {
    	$dadespregunta = array(0,0); /* [0] - Si,  [1] - No */
    	if ($pregunta->getTipus() != "BOOL") return $dadespregunta;
    	 
    	foreach ($this->realitzacions as $c => $realitzacio) {
    		$resposta = $realitzacio->getResposta($pregunta);
    		if ($resposta != null) {
    			if ($resposta->getRespostabool() == 1) $dadespregunta[0] = $dadespregunta[0]+1; // incrementa si
    			else $dadespregunta[1] = $dadespregunta[1]+1; // incrementa no
    		}
    	}
    
    	return $dadespregunta;
    }
    
}